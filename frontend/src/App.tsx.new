import React, { useState, useEffect, Suspense } from 'react';
import { BrowserRouter } from 'react-router-dom';
import CssBaseline from '@mui/material/CssBaseline';
import Box from '@mui/material/Box';
import { CircularProgress } from '@mui/material';
import Navbar from './components/Navbar';
import Sidebar from './components/Sidebar';
import { Order } from './types/Order';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { ptBR } from 'date-fns/locale';
import CorreiosService from './services/CorreiosService';
import AuthService from './services/AuthService';

// Import custom contexts
import { ThemeProvider } from './contexts/ThemeContext';
import { NotificationProvider } from './contexts/NotificationContext';

// Import error boundary
import ErrorBoundary from './components/ErrorBoundary';

// Import routes
import { routes, preloadCriticalRoutes } from './routes';

function App() {
  const [orders, setOrders] = useState<Order[]>([]);
  const [selectedStatus, setSelectedStatus] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const drawerWidth = 240;

  // Filter orders based on selected status
  const filteredOrders = selectedStatus
    ? orders.filter(order => order.status === selectedStatus)
    : orders;

  // Handle status selection
  const handleStatusSelect = (status: string | null) => {
    setSelectedStatus(status);
  };

  // Load orders from localStorage on component mount
  useEffect(() => {
    const storedOrders = localStorage.getItem('orders');
    if (storedOrders) {
      setOrders(JSON.parse(storedOrders));
    }
    setLoading(false);

    // Preload critical routes
    preloadCriticalRoutes();
  }, []);

  // Handle webhook messages (simulated)
  const handleWebhook = (event: MessageEvent) => {
    if (event.data && event.data.type === 'webhook' && event.data.order) {
      const newOrder = event.data.order;
      setOrders(prevOrders => {
        const updatedOrders = [...prevOrders, newOrder];
        localStorage.setItem('orders', JSON.stringify(updatedOrders));
        return updatedOrders;
      });
    }
  };

  // Set up webhook listener
  useEffect(() => {
    window.addEventListener('message', handleWebhook);
    return () => {
      window.removeEventListener('message', handleWebhook);
    };
  }, []);

  // Check for tracking updates periodically
  useEffect(() => {
    const checkTrackingUpdates = async () => {
      try {
        // Get orders with tracking codes
        const ordersWithTracking = orders.filter(order => order.codigoRastreio);
        
        if (ordersWithTracking.length === 0) return;

        // Prepare tracking data
        const trackingData = ordersWithTracking.map(order => ({
          idVenda: order.idVenda,
          codigoRastreio: order.codigoRastreio,
          statusCorreios: order.statusCorreios || ''
        }));

        // Verify updates for all codes
        const updates = await CorreiosService.verificarAtualizacoes(trackingData);

        if (updates && updates.length > 0) {
          // Update orders with new information
          const updatedOrders = orders.map(order => {
            const update = updates.find(u => u.orderId === order.idVenda);
            if (update) {
              return {
                ...order,
                statusCorreios: update.status
              };
            }
            return order;
          });

          setOrders(updatedOrders);
          localStorage.setItem('orders', JSON.stringify(updatedOrders));
        }
      } catch (error) {
        console.error('Error checking tracking updates:', error);
      }
    };

    // Check for updates every 30 minutes
    const interval = setInterval(checkTrackingUpdates, 30 * 60 * 1000);
    
    // Initial check
    checkTrackingUpdates();

    return () => clearInterval(interval);
  }, [orders]);

  return (
    <ErrorBoundary>
      <ThemeProvider>
        <NotificationProvider>
          <CssBaseline />
          <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={ptBR}>
            <BrowserRouter>
              {loading ? (
                <Box display="flex" justifyContent="center" alignItems="center" height="100vh">
                  <CircularProgress />
                </Box>
              ) : (
                <>
                  {AuthService.isAuthenticated() ? (
                    <Box sx={{ display: 'flex' }}>
                      <Navbar />
                      <Sidebar
                        orders={orders}
                        onStatusSelect={handleStatusSelect}
                        selectedStatus={selectedStatus}
                      />
                      <Box
                        component="main"
                        sx={{
                          flexGrow: 1,
                          p: 3,
                          width: { sm: `calc(100% - ${drawerWidth}px)` },
                          ml: { sm: `${drawerWidth}px` },
                          mt: '64px', // Height of the navbar
                          overflow: 'auto',
                          height: 'calc(100vh - 64px)'
                        }}
                      >
                        <Suspense fallback={
                          <Box display="flex" justifyContent="center" alignItems="center" height="100%">
                            <CircularProgress />
                          </Box>
                        }>
                          {routes}
                        </Suspense>
                      </Box>
                    </Box>
                  ) : (
                    <Suspense fallback={
                      <Box display="flex" justifyContent="center" alignItems="center" height="100vh">
                        <CircularProgress />
                      </Box>
                    }>
                      {routes}
                    </Suspense>
                  )}
                </>
              )}
            </BrowserRouter>
          </LocalizationProvider>
        </NotificationProvider>
      </ThemeProvider>
    </ErrorBoundary>
  );
}

export default App;
